<?php
use CG as r;
use CG\Util as u;
use CG\Web as w;
use CG\DB as db;
use CG\Backend as be;

/**
 * @file
 * Common Good Clickup Class
 * 
 * We keep a copy of much of our Clickup data in various tables: cu_spaces, cu_folders, cu_lists, cu_tasks, cu_tags, etc.
 * We do not keep a copy of individual time entries. Instead we summarize these after the 5th of each month and weekly the day before staff meetings.
 */
 
 const MISC_LIST = 88345493; // CG record ID of miscellaneous admin list (for orphaned time entries without a task or list)
 const LAZY_UPDATE = FALSE; // mostly for intial data loading

class Clickup {
  const API = 'https://api.clickup.com/api';
  private $team;
  private $token;
  
  /**
   * Return a new Clickup object.
   * @param string $creds: the company's credentials for the Clickup API
   */
  public function __construct() {
    $cu = $this;
    list ($cu->team, $cu->token) = ray(CLICKUP_CREDS);
  }
  
  /**
   * Update clickup data in all our tables except time entries.
   */
  public function updateMost() {
    $cu = $this;

    foreach ($cu->getTeam() as $m) db\updateOrInsert('cu_members', ray('id name', $m->user->id, $m->user->username));
    foreach ($cu->getSpaces() as $s) {
      db\updateOrInsert('cu_spaces', just('id name', $s));
      foreach ($cu->getFolders($s->id) as $f) {
        db\updateOrInsert('cu_folders', just('id name', $f));
        foreach ($f->lists as $list) db\updateOrInsert('cu_lists', just('id name', $list) + ray('folder', $f->id));
      }
      foreach ($cu->getOtherLists($s->id) as $list) db\updateOrInsert('cu_lists', just('id name', $list) + ray('space', $s->id));
    }
    w\say('Done.');
  }

  /**
   * Update clickup time entries ending in the given time range.
   */
  public function updateTimes($start = NOW - DAY_SECS, $end = NOW) {
    foreach ($this->getTimes($start, $end) as $t) {
      extract($ray = just('id task user start end task_location', $t, NULL));
      if (!is_object($task)) {
        if ($task_location) {
          extract(just('list_id', $task_location));
          $taskid = "inlist#$list_id";
        } else list ($list_id, $taskid) = [MISC_LIST, "inlist#unknown"];
        db\updateOrInsert('cu_tasks', ray('id name list', $taskid, t('Unknown Task ') . $taskid, $list_id));
      } else $taskid = $task->id;
      if (!is_object($user)) die("user=$user");
      db\updateOrInsert('cu_times', ray('id task member start stop', $id, $taskid, $user->id, round($start / 1000), round($end / 1000)));
    }
    w\say(t('Done'));
  }
  
  /**
   * Update tasks for time entries ending in a given time range or other criteria.
   * call as:
   *   $cu->updateTasks(start, end); OR
   *   $cu->updateTasks(sql);
   * @param int $start: starting time (Unix)
   * @param int $end: ending time (Unix)
   * @param string $sql: selection criteria to use instead of date range of time entries
   *   for example, 'SELECT DISTINCT parent AS task FROM cu_tasks WHERE parent IS NOT NULL'
   */
  public function updateTasks($start = NOW - DAY_SECS, $end = NOW) {
    $sql = is_int($start) ? 'SELECT DISTINCT task FROM cu_times tm LEFT JOIN cu_tasks ts ON ts.id=tm.task WHERE stop BETWEEN :start AND :end' : $start;
    $q = db\q($sql, compact(ray('start end')));
    while ($row = $q->fetch()) if (!strhas($id = $row->task, '#')) { // don't look for tasks that don't exist in ClickUp
      if (LAZY_UPDATE and db\exists('cu_tasks', compact('id'))) continue;
      $o = $this->getTask($id);
      extract(just('name parent list status priority class tags time_estimate time_spent date_closed', $o, NULL)); // sometimes this doesn't even have an id field!
      u\setDft($name, t('Unnamed'));
      $priority = is_object($priority) ? $priority->id : $priority;
      $status = is_object($status) ? $status->status : $status;
      $list = is_object($list) ? $list->id : MISC_LIST;
/// if (!is_object($$k)) die('non object in task: ' . pr($o));
      $tags = $tags ? join(',', $this->just1('name', $tags)) : '';
      $info = compact(ray('id list name parent class tags priority status')) + ray('estimate spent closed', $time_estimate / 1000, $time_spent / 1000, $date_closed / 1000);
      db\updateOrInsert('cu_tasks', $info);
    }

    w\say(t('Done'));
  }
  
  /**
   * Get all time entries in the given range of date/times.
   */
  public function getTimes($start, $end) {
    foreach ($this->getTeam() as $member) $team[] = $member->user->id;
    $args['assignee'] = join(',', $team);
    foreach (ray('start end') as $k) $args[$k . '_date'] = $$k * 1000;
    $args += ray('include_task_tags include_location_names', FALSE, FALSE);
    $o = $this->get("team/$this->team/time_entries", $args);
    if (!is_object($o) or !isset($o->data)) die('bad times: ' . pr($o)); // usually a Clickup error message
    return $o ? $o->data : [];
  }
  
  private function get($uri, $args = []) {
    static $cnt = 0; $cnt++;
    $hdrs['Authorization'] = $this->token;
    if ($cnt > 100) {$cnt = 0; sleep(61);}
    return json_decode(u\post(self::API . "/v2/$uri", $args, t('Unable to get time entries'), $hdrs, 'GET'));
  }
  
  public function getTeam() {static $members; return nn($members) ?: ($members = $this->get('team')->teams[0]->members);}
  public function getSpaces() {return $this->get("team/$this->team/space")->spaces;}
  public function getFolders($space) {return $this->get("space/$space/folder", ray('archived', 'true'))->folders;}
  public function getOtherLists($space) {return $this->get("space/$space/list", ray('archived', 'true'))->lists;}
  public function getTask($task) {return $this->get("task/$task", ray('include_subtasks', TRUE));}

  public function just1($k, $ray) {foreach ((array) $ray as $one) $res[] = nni((array) $one, $k); return nn($res, []);}
  
}
