<?php
/**
 * @file
 * Admin Steps
 *
 * Provide step functions for functional testing.
 * This file is created automatically by the Gherkin compiler.
 *
 * Note, therefore, that most of this file might be changed automatically
 * when you run the compiler again. This @file header will not be affected,
 * but all of the function header comments are (re)generated automatically.
 *
 * Be assured that no functions will be deleted and the compiler will
 * not alter code within a function unless you make it look like a function header.
 *
 * You may also add statements just below this header (for example "use" and "require_once").
 */
use CG as r;
use CG\DB as db;
use CG\Testing as t;
use CG\Util as u;
use CG\Backend as be;

require_once __DIR__ . '/../defs.inc';

if (basename($_SERVER['SCRIPT_FILENAME']) != 'compile.php') {
  require_once __DIR__ . '/../cg.inc';
  require_once __DIR__ . '/../cg-testing.inc';
}

/**
 * Add additional setup for any or all features or tests
 */
function extraSetup() {
  t\clear(TX_WEB);
}

/**
 * members: (ARG)
 *
 * in: MAKE 1099s Setup
 *     MAKE aaOther Setup
 *     MAKE ach Setup
 *     MAKE activate Setup
 *     TEST activate AdminActivatesAnAccount
 *     TEST activate AdminActivatesAnAccountUnconfirmed
 *     TEST activate AdminDeactivatesAnAccount
 *     MAKE changes Setup
 *     MAKE checks Setup
 *     MAKE deletion Setup
 *     MAKE super Setup
 */
function members($list) {return t\members($list);}

/**
 * member (ARG) visits page (ARG)
 *
 * in: MAKE aaOther AdminDeletesAnAccount
 *     MAKE ach AdminDownloadsACHRequests
 *     MAKE changes AMemberChangesSomeSettings
 *     MAKE checks AdminPrintsChecks
 */
function memberVisitsPage($id, $page) {return t\memberVisitsPage($id, $page);}

/**
 * we show (ARG) with: (ARG)
 *
 * in: TEST ach AdminDownloadsACHRequests
 *     TEST changes AMemberChangesSomeSettings
 *     TEST checks AdminPrintsChecks
 */
function weShowWith($title, $content = FALSE, $showDebugs = TRUE) {
  return t\weShowWith($title, $content, $showDebugs);
}

/**
 * member (ARG) completes form (ARG) with values: (ARG)
 *
 * in: MAKE activate AdminActivatesAnAccount
 *     MAKE activate AdminActivatesAnAccountUnconfirmed
 *     MAKE activate AdminDeactivatesAnAccount
 *     MAKE changes AMemberChangesSomeSettings
 */
function memberCompletesFormWithValues($id, $page, $values) {return t\completeForm($id, $page, $values);}

/**
 * we show PDF with: (ARG)
 *
 * in: TEST checks AdminPrintsChecks
 *     TEST super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 */
function weShowPDFWith($list) {return t\pdfHas($list);}

/**
 * balances: (ARG)
 *
 * in: BOTH 1099s Setup
 *     TEST checks AdminPrintsChecks
 */
function balances($list) {return t\balances($list);}

/**
 * we notice (ARG) to member (ARG) with subs: (ARG)
 *
 * in: 
 */
function weNoticeToMemberWithSubs($notice, $id, $subs) {return t\notice($notice, $id, $subs);}

/**
 * member (ARG) has no photo ID recorded
 *
 * in: MAKE activate AdminActivatesAnAccount
 *     MAKE activate AdminActivatesAnAccountUnconfirmed
 */
function memberHasNoPhotoIDRecorded($id) {return t\noPhotoId($id);}


/**
 * with: (ARG)
 *
 * in: TEST ach AdminDownloadsACHRequests
 *     TEST changes AMemberChangesSomeSettings
 */
function with($content) {return t\weShow($content);}

/**
 * these (ARG): (ARG)
 *
 * in: MAKE 1099s Setup
 *     MAKE aaOther Setup
 *     TEST aaOther AdminDeletesAnAccount
 *     MAKE ach Setup
 *     BOTH ach AdminDownloadsACHRequests
 *     MAKE activate Setup
 *     MAKE checks Setup
 *     BOTH checks AdminPrintsChecks
 *     MAKE deletion Setup
 *     TEST deletion ADeletedbyviewRecordIsDeleted
 *     TEST deletion ATrackdeletedRecordIsDeleted
 *     TEST deletion AMemberRecordIsDeleted
 *     MAKE deletion ARecordIsDeletedFromAnUntrackedTable
 *     MAKE super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 */
function these($thing, $list) {return t\these($thing, $list);}

/**
 * member (ARG) has done step (ARG)
 *
 * in: MAKE changes AMemberChangesSomeSettings
 */
function memberHasDoneStep($id, $step) {return t\doneStep($id, $step);}

/**
 * we message (ARG) to member (ARG) with subs: (ARG)
 *
 * in: TEST activate AdminActivatesAnAccount
 *     TEST activate AdminActivatesAnAccountUnconfirmed
 */
function weMessageToMemberWithSubs($index, $id, $subs) {return t\weMessage($index, $id, $subs);}

/**
 * members have: (ARG)
 *
 * in: MAKE activate AdminActivatesAnAccountUnconfirmed
 *     MAKE activate AdminDeactivatesAnAccount
 */
function membersHave($list) {return t\membersHave($list);}

/**
 * member (ARG) runs a (ARG) report type (ARG) with testing (ARG)
 *
 * in: MAKE 1099s AdminGeneratesAReportForThePastMonths
 */
function memberRunsAReportTypeWithTesting($id, $ten99, $type, $testing) {
  global $testOnly;
  require R_ROOT . '/cg-yearly.inc';
  t\login($id);
  if ($ten99 != '1099') return t\out('ten99 must be 1099');
  r\Special\do1099s($type, $testing); 
  return TRUE;  
}

/**
 * we download (ARG) with (ARG) records: (ARG)
 *
 * in: TEST 1099s AdminGeneratesAReportForThePastMonths
 *     TEST ach AdminDownloadsACHRequests
 */
function weDownloadWithRecords($flnm, $fileType, $rows) {
  global $testOnly; if (!$testOnly) return FALSE;
  global $testDownloadFlnm, $testRecs;
  $flnm = str_replace('NOW', strftime('%Y%m%d%H%M'), $flnm);
  if (!t\eq(t('download filename'), $flnm, $testDownloadFlnm)) return FALSE;
  if (!t\eq(t('number of records'), count($rows), count($testRecs ?: []))) return FALSE;

  if ($fileType == '1099') return t\got1099($flnm, $rows);
  if ($fileType == 'ACH') return t\gotACH($flnm, $rows);
  return t\output(t('Bad record file type: ' . $fileType));
}

/**
 * count (ARG) is (ARG)
 *
 * in: TEST deletion Setup
 *     TEST deletion ADeletedbyviewRecordIsDeleted
 *     TEST deletion ATrackdeletedRecordIsDeleted
 *     TEST deletion AMemberRecordIsDeleted
 *     TEST deletion ARecordIsDeletedFromAnUntrackedTable
 */
function countIs($what, $count) {return t\count($what, $count);}

/**
 * we delete table (ARG) record (ARG)
 *
 * in: MAKE deletion ADeletedbyviewRecordIsDeleted
 *     MAKE deletion ATrackdeletedRecordIsDeleted
 *     MAKE deletion AMemberRecordIsDeleted
 *     MAKE deletion ARecordIsDeletedFromAnUntrackedTable
 */
function weDeleteTableRecord($tnm, $record) {
  global $testOnly; if ($testOnly) return FALSE;

  list ($fnm, $v) = explode(':', $record); // for example "id:4"
  if (u\starts($v, '.') or strhas($v, ':')) $v = t\uid($v);
  return ($tnm == 'users' and $idFnm = 'uid') ? f('a.deleteUid', $v) : db\del($tnm, $fnm, $v);
}

/**
 * member (ARG) is signed in
 *
 * in: MAKE super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 */
function memberIsSignedIn($id) {return t\isSignedIn($id);}

/**
 * member (ARG) visits (ARG)
 *
 * in: MAKE super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 *     MAKE super AMemberTriesToDoAHighlevelAdminThing
 */
function memberVisits($id, $page) {return t\memberVisitsPage($id, $page);}

/**
 * we show (ARG)
 *
 * in: 
 */
function weShow($what, $show = TRUE) {return t\weShow($what, $show);}

/**
 * member (ARG) scans admin card (ARG)
 *
 * in: MAKE 1099s Setup
 *     MAKE aaOther Setup
 *     MAKE ach Setup
 *     MAKE activate Setup
 *     MAKE checks Setup
 *     MAKE super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 */
function memberScansAdminCard($id, $vKeyPw) {return t\memberScansAdminCard($id, $vKeyPw);}

/**
 * cryptcookie (ARG) is (ARG)
 *
 * in: 
 */
function cryptcookieIs($nm, $v) {return t\cookieIs($nm, u\ry('C', $v));}

/**
 * cryptcookie (ARG) is (ARG) decrypted
 *
 * in: TEST super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 */
function cryptcookieIsDecrypted($nm, $v) {return cryptcookieIs($nm, u\b64decode($v));}

/**
 * we say (ARG): (ARG) with: (ARG)
 *
 * in: TEST super ASuperAdminGrantsSuperPermissionToAnotherAdmin
 *     TEST super AMemberTriesToDoAHighlevelAdminThing
 */
function weSayWith($type, $index, $subs) {return t\weSayWithSubs($type, $index, $subs);}
