<?php
namespace CG\Cron;
use CG as r;
use CG\DB as db;
use CG\Util as u;
use CG\Backend as be;
use CG\Risk as k;
use CG\Web as w;
use CG\Cron as cr;

/**
 * @file
 * Functions to run periodically.
 *
 * To run a SINGLE cron function "zot" from the PHP window, use: f('cr.zot', arg1,...);
 * To run all the daily functions starting with a particular function "zot", use:
 * cr\zot(arg1,...); // to run ALL daily functions, zot=everyDay
 *
 * Note: Timed cron is disabled on the staging site. Here's what the cron job would be:
  <star>/5 * * * * curl https://new2.CommonGood.earth/cron.php?cron_key=w8x3lfzNQK1bxMz6RMTuF54mMInAs4b8SiVJO9zvWYg
  where <star> means * (not the same key as for the production site) 
 
 * @todo:
- identify pending joint accounts and alert both parties (with link to complete or cancel) select reid, u1.fullName, u2.fullName FROM r_relations r LEFT JOIN users u1 ON r.main=u1.uid LEFT JOIN users u2 ON u2.uid=r.other WHERE (SELECT reid FROM r_relations WHERE main=r.other AND other=r.main) IS NULL AND r.permission=7 
DAILY (every 5 mins for 5 mins, starting at 2am)
- checkAccts() check accounts (and their activity) more thoroughly for consistency, security, scams
- notify and maybe fine late borrowers
- suggest another donation (after a year?) if first was small
WEEKLY
- tell members what they did that was dumb
MONTHLY
- distribute community dividends (based on growth of account's wider economic ctty)
- archive the 13th previous month (13 is a parameter -- transactions are accessible for ever, but slower)
YEARLY
 */

// Calculate risks twice, to take into account connections with scoundrels
const DAILY_OPS = 'START checkAccts setNear cttyStats trust acctRisk acctRiskFinish txRisk biggies tickle annualGift renewBacking lessOften recurs pendingRequests getFunds notices END';
const LOGLESS_OPS = 'acctHourly checkAcct whatsUp tickleStep activeWeekly activeMonthly recur'; // don't log these calls
const POST_DETAIL_MAXLEN = 256; // maximum number of characters to show in post detail
include_once __DIR__ . '/rcron-subs.inc';

/**
 * Execute a cron run when called.
 */
function run() {
  global $channel; $channel = TX_CRON; // set this even if called from PHP window by admin
// NO (happens too often)  u\log('running cron');
  // Allow execution to continue even if the request gets canceled.
  ignore_user_abort(TRUE);

  // Prevent session information from being saved while cron is running.
  $original_session_saving = \drupal_save_session();
  \drupal_save_session(FALSE);

  // Force the current user to anonymous to ensure consistent permissions on cron runs.
  $original_user = $GLOBALS['user'];
  $GLOBALS['user'] = \drupal_anonymous_user();

  \drupal_set_time_limit(4 * 60);

  if (\lock_acquire('cron', 240.0)) {
    cr\periodic();
    \lock_release('cron');
  } else u\log(t('Attempted to run cron while it was already running.'));

  $end = now() + R_CRON_PERIOD - R_MAX_TASK_TIME;
  $sql = 'SELECT id,item FROM queue ORDER BY id';
  $q = db\q($sql);
  
  while (now() < $end and $row = $q->fetchAssoc()) {
    extract($row);
    $item = unserialize($item);
    try {
      cr\doTask($item);
      db\q('DELETE FROM queue WHERE id=:id', compact('id'));
    } catch (\Exception $e) {
      u\log('cron task failed'); // In case of exception log it and leave the item in the queue to be processed again later.
      r\tellAdmin('cron task failed id=' . $id . pr($e), $item);
    }
  }
  // Restore the user.
  $GLOBALS['user'] = $original_user;
  \drupal_save_session($original_session_saving);
}

/**
 * Do a queued task
 * @param assoc $item: task arguments, including 'op' -- the function to handle the task
 */
function doTask($item) {
  global $channel; $channel = TX_CRON;
  global $mya;

  $op = array_shift($item);
  $func = 'CG\\Cron\\' . $op;

  extract(just('uid', $item, NULL));
  if ($uid) $mya = r\acct($uid); // fudge current account
  if (!in($op, LOGLESS_OPS) and substr($op, -1, 1) != '1') u\log($op, 'cr', $item);

  $func($item);
}

/**
 *  Do this stuff every time cron is called (normally every 5 minutes)
 *  Check to see if it's time for a less-often periodic activity (and if so do it).
 */
function periodic() {
  if ($row = db\q('SELECT * FROM queue WHERE created<:NOW-:DAY_SECS/2 LIMIT 1')->fetchAssoc()) {
    r\tellAdmin('task timed out', $row); // shouldn't happen. Drupal's queue processing hangs until we delete.
    db\q('DELETE FROM queue WHERE id=:id', just('id', $row));
  }
    
  often('hour', '00');
  often('day', R_DAILY_HOUR); // longer periods get queued in lessOften(), so notices are last
  
  $sql = <<< X
    SELECT DISTINCT * FROM (
      SELECT 'users' AS tnm, uid AS id, '' AS address, city, state, zip, latitude, longitude
        FROM users WHERE risks&(1<<:K_ADDROFF)=0 AND uid NOT :CANONIC
      UNION SELECT 'people' AS tnm, pid AS id, address, city, state, zip, latitude, longitude
        FROM people
    ) p
    WHERE latitude=0 AND longitude=0 AND city IS NOT NULL AND state<>0
X;
  queueEach('geocode', $sql);  
}

function everyHour() { // stuff to do every hour
//  queueEach('acctHourly', "SELECT uid FROM users WHERE uid<>0");
  if (strftime('%H') + 0 == (R_DAILY_HOUR + 6) % 24) {
    $lastCron = getV('last_cron_end', []);
    if (now() - nni($lastCron, 'end', 0) > DAY_SECS) r\tellAdmin('daily cron FAILED');
  }
  
  db\q('DELETE FROM cache_form WHERE created<:REQUEST_TIME-:HOUR_SECS'); // clean up form cache (is this needed?)

}

function geocode($item) {
  extract(just('tnm id address city state zip', $item));

  if ($tnm == 'users') {
    $a = r\acct($id);
    $address = $a->address;
  }
  
  list ($lat, $lon, $zot) = u\getLocus($address, $city, $state, $zip);
  if ($lat or $lon) {
    if ($tnm == 'people') {
      return db\update('people', ray('pid latitude longitude', $id, $lat, $lon), 'pid');
    } else return $a->setLocus($lat, $lon); // users
  }
  
  if ($tnm == 'users') $a->setRisk('addrOff');
  return r\tellAdmin(t('setLocus returned no match in %tnm record %id', 'tnm id', $tnm, $id));
}

/**
 * Account checks to do every hour.
 */
function acctHourly($item) {
  return; // nothing to do, currently
  extract(just('uid', $item));
  $a = r\acct($uid);
//  $a->shortfall(FOR_GOODS, PHP_INT_MAX); // notice recent deposits, if any
}

/**
 * Do miscellaneous stuff that needs doing every day
 */
function everyDay() {
  if (db\exists('queue')) { // daily tasks already in progress
    if (date('j') + 0 < 5) r\tellAdmin('Daily cron already in process!'); // not unexpected throughout the hour
    return;
  }
  
  queueNext('START'); // eachA seems to interfere with this and processing the queue is vital, so launch it first
  db\q('DELETE FROM r_do WHERE completed<0 AND :NOW>-completed'); // completed<0 is -expiry time

  $cttys = db\q('SELECT uid AS ctty FROM users WHERE uid<0')->fetchCol();
  foreach ($cttys as $ctty) $companies[$ctty] = r\companies($ctty, FALSE);  
  \setV('companies', nn($companies) ?: []);
  
  $sql = <<< X
  SELECT DISTINCT u.uid, c.uid AS ctty, u.fullName AS person, cu.fullName AS cttyName 
  FROM users u LEFT JOIN u_company c ON u.zip RLIKE c.zips LEFT JOIN users cu ON cu.uid=c.uid
  WHERE u.community=:seedpack AND c.uid<1 AND c.uid<>:seedpack AND !u.activated
X;
  $q = db\q($sql, ['seedpack' => r\serverUid()]);
  while ($row = $q->fetchAssoc()) {
    extract($row);
    db\update('users', ray('uid community', $uid, $ctty), 'uid');
    r\tellAdmin(t('Not-yet-member %person was in Seedpack; should be (now is) in %cttyName', $row));
  }
  
  if ($xid = db\get('xid', '(SELECT xid,SUM(amount) AS amt FROM tx_entries GROUP BY xid) t', 'amt<>0')) r\tellAdmin(t('Not all transactions have entries totaling zero (eg xid=%xid).', compact('xid')));

  $where = "BINARY RIGHT(fullName, 8)=' PARTNER' AND pass IS NULL AND NOT :IS_CO AND activated=0";
  eachA(function ($a) { // acts weird; do this last
    if ($jA = $a->jA and $jA->jid == $a->id) $jA->update('jid', 0);
    f('a.deleteUid', $a->id);
  } , $where);
  eachA(function ($a) { // delete robots
    if (!$a->member and !$a->ok and $a->nextStep() == 'verifyemail' and now() - $a->created > 7*DAY_SECS and $a->steps+0 == 1 and strhas($a->source, 'self ()')) {
      $s = str_replace('self () ', '', $a->source);
      $s = str_replace('knows: ', '', $s);
      if (!strhas($s, ' ')) f('a.deleteUid', $a->id);
    }
  });

  if ($uid = db\get('u1.uid', 'users u1 JOIN users u2 ON u2.uid=u1.jid', 'u1.jid<>0 AND u2.jid<>u1.uid')) r\tellAdmin('Orphaned joint account: ' . r\acct($uid)->fullName, [], $uid);
//  db\del('users', $where); // abandoned new joint acct (must postcede setting jids)

  // Notice which bank accounts have been verified
  $where = 'deposit>UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL 7 DAY)) AND deposit<UNIX_TIMESTAMP(DATE_SUB(NOW(), INTERVAL :VERIFICATION_DELAY DAY))  AND (SELECT 1 FROM txs2_bank d2 WHERE d2.txid=-d.txid) IS NULL';

  if ($uids = db\col('payee', 'txs2_bank d', $where)) {
    $DBTX = \db_transaction();
    foreach ($uids as $uid) if ($a = r\acct($uid) and $a->hasBank) $a->setBit(B_BANKOK);
    db\del('txs2_bank', 'amount=0 AND payee IN (:uids)', compact('uids'));
    unset($DBTX);
  }
  db\q('DELETE FROM x_txs2 WHERE amount=0'); // no need to track these
}

/**
 * Generate rules, transactions, and invoices from tx_timed.
 * Instantiate surtx rules first so they apply to subsequent transactions.
 * Action options are: 
 *   surtx: step ups, discounts, or subsidies that recur (just for food fund subsidies so far)
 *   pay or charge: recurring payments and invoices (if pay amount is NULL, sweep all but the account's target balance)
 */
function recurs() {
  $sql = <<< EOF
    SELECT tm.*, MAX(
      IF(tm.action=:ACT_SURTX, ru.start, 
      IF(tm.action=:ACT_PAY, GREATEST(IFNULL(x.created,0), IFNULL(i.created,0)),
      i.created))
    ) AS maxStart
    FROM tx_timed tm
    LEFT JOIN tx_rules ru ON ru.template=tm.id
    LEFT JOIN txs x ON x.recursId=tm.id
    LEFT JOIN tx_requests i ON i.recursId=tm.id
    WHERE tm.action IN (:ACT_SURTX, :ACT_PAY, :ACT_CHARGE)
    AND tm.start <= :NOW
    AND IFNULL(tm.end, :NOW+1) > :NOW
    GROUP BY tm.id
    ORDER BY (tm.action=:ACT_SURTX) DESC, tm.id
EOF;

  queueEach('recur', $sql);
  queueNext();
}
  
function recur($template) {
  extract(just('id maxStart period periods end duration durations action from to purpose amount', $template));
  $shouldStart = empty($maxStart) ? now() : u\dateIncr($maxStart, $periods, $period);
  if ($end and $end < $shouldStart) return; // don't create anything after template expires
  $erSubs = compact(ray('template shouldStart'));

  if ($action == 'surtx') {
    if ($shouldStart > now() + WEEK_SECS) return; // don't create rules more than a week in advance
    $rule = justNot(ray('id period periods duration durations start end maxStart'), $template);
    $rule['template'] = $id;
    $rule['start'] = $shouldStart;
    $rule['end'] = u\dateIncr($shouldStart, $durations, $duration);
    $ok = db\insert('tx_rules', $rule, 'id');
    if (!$ok) r\tellAdmin(t('Insert rule failed in recur'), $erSubs);

  } elseif (in($action, 'pay charge')) {
    if ($shouldStart > strtotime('tomorrow')) return; // don't create transactions and invoices until the right day
    $fromA = r\acct($from); $toA = r\acct($to);
    if (!$toA->ok) return r\tellAdmin(t('Attempt to pay (or invoice from) an inactive account in recur'), $erSubs);
    if (!$fromA->ok) {
      if ($action == 'pay' or $fromA->closed) return; // keep recurring donations around in case member re-opens account (but until then don't do it)
    }

    if ($period and $period != 'once') {
      $when = r\recurDesc($period, $periods);
      $erSubs += compact(ray('when purpose'));
    } else { $when = t('one-time'); }

    $data = ray('created recurs', $shouldStart, TRUE); // keep this synced with template even if cron fails for a few days
    if ($action == 'pay' and $to == CGID) $data += ['gift' => TRUE]; // assume any recurring payment to CG is a gift
    
    if ($action == 'pay') {
      if (is_null($amount)) { // sweep
        if (!$amount = max(0, $fromA->balance - $fromA->minimum)) return;
      }        
      $z = $fromA->payApproved($to, $amount, $purpose, $action == 'pay' ? FOR_GOODS : FOR_USD, $data, $id);
      if (!$z->ok) return r\tellAdmin(t('Pay failed in recur'), $erSubs);
      $fromA->tellOut('recur pay', ray('amount when purpose payee', u\fmtAmt($amount), $when, $purpose, $toA->fullName));
    } else { // charge
      $z = be\invoice($toA, $fromA, $amount, $purpose, FOR_GOODS, $data, $id);
      if (!$z->ok) return r\tellAdmin(t('Invoice failed in recur'), $erSubs + just('msg', $z));
    }
    if ($period == 'once') r\endRule('tm', $id);

  } else { FAIL(t('bad action in template: ') . pr($template)); }
  
}

/**
 * Do things a certain number of days after the created, signed, invite, firstTx, last login, or last access date.
 */
function tickle() {
//  $delays = '1,2,3,5,8,13,21,34,55,89,144'; // Fibonacci progression of delays
  $timeSince = "(ROUND((:NOW-@DATE)/:DAY_SECS, 0))";

  // Remind invitee to accept
  $delays = '3,8,21';
  $elapsed = str_replace('@DATE', 'invited', $timeSince);
  $sql = <<< X
    SELECT DISTINCT i.email, i.inviter, i.code, $elapsed AS elapsed FROM r_invites i
    LEFT JOIN users u ON u.uid=i.inviter
    WHERE $elapsed IN ($delays) AND i.invitee=0 AND u.:IS_OK AND i.nonudge IS NULL AND i.email<>''
X;

  queueEach('tickleSignup', $sql);

  $delays = '1,4,9,22'; // delays proposed by staff (ultimately every week)
  $elapsed = str_replace('@DATE', 'access', $timeSince);
  $sql = <<< X
    SELECT DISTINCT uid, $elapsed AS elapsed FROM users 
    WHERE ($elapsed IN ($delays) OR ($elapsed>8 AND $elapsed%7=0))
    AND uid>:UID_CANON9 AND NOT activated AND NOT :IS_NONUDGE
X;
  queueEach('tickleStep', $sql);

  $sinceActivated = 'DATEDIFF(CURDATE(), FROM_UNIXTIME(activated))';
  // Do every 30 days after activation date
  $start = strtotime(-FLOOR_DAYS . ' days', now());
  $sql = <<< X
    SELECT DISTINCT uid, GREATEST(inVol, outVol) AS monthly, $sinceActivated/30 AS months
    FROM (
      SELECT uid, u.flags, activated,
      SUM(IF(amount > 0, amount, 0))/6 AS inVol,
      SUM(IF(amount < 0, -amount, 0))/6 AS outVol
      FROM users u LEFT JOIN (
        SELECT e.amount,e.uid FROM tx_entries e JOIN txs_noreverse tnr USING(xid) WHERE tnr.created>=$start
      ) t USING(uid)
      WHERE u.:IS_OK AND u.uid>:UID_CANON9
      AND $sinceActivated>0 AND $sinceActivated % 30 = 0 
      GROUP BY uid
    ) x 
X;

  queueEach('activeMonthly', $sql); // no need for jid here (floors get summed)
  queueEach('activeWeekly', "SELECT DISTINCT uid FROM users WHERE :IS_OK AND uid>:UID_CANON9 AND $sinceActivated>0 AND $sinceActivated % 7 = 0");
  queueNext();
}  

/**
 * Remind invitee to accept invitation.
 */
function tickleSignup($item) {
  extract(just('email inviter code elapsed', $item));
  if (r\acct($email = u\decry('P', $email))) return; // invitee already began to open an account
  $inviterA = r\acct($inviter);
  $inviterName = $inviterA->fullName;
  $nudge = t($elapsed < 10 ? 'reminder coming' : 'reminder last');
  r\rMail('nonmember', $email, ray('fullName nudge code noFrame', $inviterName, $nudge, $code, TRUE));
  $inviterA->tellMisc('invite languishing', compact('email', 'elapsed'));
}

/**
 * Remind newb to take another step.
 */
function tickleStep($item) {
  extract(just('uid elapsed', $item));
  $a = r\acct($uid);

  if (!$a->member and $step = $a->nextStep()) {
    $msg = ($a->stepCount() >= 4) ? 'do step one' : 'take another step';
    $a->tellMisc("$msg|sign in|daily messages");
    if ($elapsed >= 9 and $elapsed < 30) {
      $sql = 'SELECT DISTINCT inviter FROM r_invites i LEFT JOIN users u ON u.uid=i.inviter WHERE invitee=:uid AND u.:IS_OK';
      $q = db\q($sql, compact('uid'));
      while ($row = $q->fetchAssoc()) {
        extract($row);
        r\acct($inviter)->tellMisc('invitee slow', ray('fullName elapsed step', $a->fullName, $elapsed, $step));
      }
    }
  } elseif ($a->member and !$a->ok) {
    return r\tellAdmin('activate account', compact('uid'));
  }
}

/**
 * Do stuff monthly (every 30 days) since member has been active:
 * . Calculate credit line (for overdrafts etc.): give the member (cg)credit up to their average monthly throughput over the past 6 months
 *   (which comes to 1/6 their monthly throughput if they've been in for a month, 2/6 for 2 months, etc, up to 100% at 6 months)
 *   A community's credit limit is the amount in its Dollar Pool.
 * . Cashout automatically if account chose that monthly option.
 */
function activeMonthly($item) {
  extract(just('uid monthly', $item));
  $a = r\acct($uid);
  
  // adjust credit line
  $floorX = $a->o_floor; // current floor (of just this account, not summed with joint)
  
  $floor = -$monthly;
  if ($a->isCtty) $floor = -db\sum('amount', 'txs2_bank t JOIN users u ON u.uid=t.payee', 'u.community=:ctty', ray('ctty', $a->id));
  $a->update('floor', $floor);

  $ratio = $floor ? $floorX / $floor : 1;
  if ($ratio > 1.2 or $ratio < .8) { // big change (or any change in sign)
    $limit = u\fmtAmt(-$a->floor); // (report total to master of joint accounts)
    $msg = 'new floor' . ($a->can(B_DEBT) ? '' : '|no floor effect');
//    r\tellAdmin('new floor', compact(ray('limit monthly floor floorX ratio msg')));
  // DISABLED FOR now() if (!$a->slave) $a->tellMisc($msg, compact('limit'));
  }
  
  if ($a->cashoutM) $a->cashout();
}

function activeWeekly($item) {
  extract(just('uid', $item));
  $a = r\acct($uid);
  if ($a->cashoutW) $a->cashout();
}

/**
 * Warn members about upcoming annual donation (or lack thereof) -- a week before it's due.
 */
function annualGift() {
  $join = "LEFT JOIN tx_timed tm ON tm.action=:ACT_PAY AND tm.from=u.uid AND tm.to=:CGID AND tm.period='year' AND tm.end IS NULL";
  queueEach('warnAnnual1', annualSql('Donate', 'tm.amount', 'IFNULL(tm.start, u.activated)', $join));
  queueNext();
}

/**  
 * Warn members about upcoming backing renewal date (a week ahead).
 */
function renewBacking() {
  $sql = annualSql('Backing', 'backing AS amount', 'backingDate', '', 'backingNext IS NULL');
  queueEach('warnAnnual1', $sql);
  db\q('UPDATE users SET backing=IFNULL(backingNext, backing), backingDate=:today, backingNext=NULL WHERE backingDate+:YEAR_SECS<:NOW AND :IS_OK AND backing>0', ray('today', today())); // automatically renew (member decreased it or didn't update it in time)
  queueNext();
}
 
/**
 * Give the member a chance to renew their annual donation or backing.
 */
function warnAnnual1($item) {
  extract(just('func uid amount base target', $item));
  $tpls = ray('Donate:annual-gift, Backing:renew-backing');

  $a = r\acct($uid);
  $atag = w\atag("/do/do$func~" . $a->doCode());
  $track = u\cryRay(ray('qid type', $a->mainQid, strtolower($func)));
  $subs = ray('amount when atag track', u\fmtAmt($amount), u\fmtDate(strtotime($target), TRUE), $atag, $track);
  $a->tellMisc($tpls[$func], $subs);
}

function annualSql($func, $amtFld, $dtFld, $join = '', $where = '1') {
  return <<< X
    SELECT DISTINCT '$func' AS func, u.uid, $amtFld, FROM_UNIXTIME($dtFld) AS base,
      ADDDATE(CURDATE(), INTERVAL :RENEW_ADVANCE_DAYS DAY) AS target,
      ADDDATE(CURDATE(), INTERVAL (:RENEW_ADVANCE_DAYS-1) DAY) AS beforeTarget
    FROM users u $join
    WHERE u.:IS_OK AND u.uid>0 AND u.uid NOT :CANONIC AND $where
    HAVING TIMESTAMPDIFF(YEAR, base, target) > TIMESTAMPDIFF(YEAR, base, beforeTarget)
X;
}

/**
 * Do periodic activities where the period is longer than a day.
 */
function lessOften() {
  often('week', R_WEEKLY_DAY);
  often('month', R_MONTHLY_DAY);
  often('year', '01');  
  queueNext();
}

/**
 * Do something periodically if it's time and hasn't been done yet.
 * That is, if the chosen point in the period has been reached AND
 *   (it has been at least a whole period since the last run OR
 *   (it has been at least half a period and we're at no later a point than last time)
 * @param string $period: the period (hour, day, week, month, year)
 * @param string $chosen: the chosen value to match or exceed (if omitted, assume it's the current period)
 */
function often($period, $chosen = '') {
  if (!timeFor(now(), $period, $chosen)) return;

  $lastCron = getV('last_cron_end');
  $lastCron[$period] = now();
  setV('last_cron_end', $lastCron); // remember that this periodic activity has been done
  
  $function = 'CG\\Cron\\every' . ucwords($period);
  $topic = t('cron period', compact('period'));
  $time = strftime('%I:%M%P', now());
  $msg = t('Running cron for the %period, at %time', compact('period', 'time'));
  if ($period != 'hour') r\tellAdmin($msg, compact('topic'));

  $lastStart = getV('last_cron_start');
  $lastStart[$period] = now();
  setV('last_cron_start', $lastStart); // remember that this periodic activity has been done

  $function(); // do it
}

/**
 * Do weekly tasks.
 */
function everyWeek() {
  // help members increase their overall savings (or crawl out of primary account debt)
  $refillable = ':IS_OK AND :HAS_BANK AND :IS_REFILL';
  $newMin = "(minimum+GREATEST(saveWeekly, :MIN_WEEKLY_BUMP))"; // crawl out of debt by at least $1 a week
  db\q("UPDATE users SET minimum=IF(ABS($newMin)<.01, .01, $newMin) WHERE $refillable AND minimum<GREATEST(0, floor)"); // crawl out of debt
  db\q("UPDATE users SET minimum=minimum+saveWeekly WHERE $refillable AND saveWeekly>0 AND minimum>=GREATEST(0, floor)"); // build up savings
//  db\q('UPDATE users SET savingsAdd=GREATEST(0, savingsAdd+saveWeekly) WHERE :IS_OK AND :HAS_BANK AND saveWeekly<>0'); // save or unsave
}

/**
 * Do monthly tasks.
 */
function everyMonth() {
  $start = u\monthDay1($end = u\monthDay1() - 1); // mark start and end of preceding month
  if (test()) $start = strtotime('-30 days', $end = today() - 1) + 1; // test: the past 30 days
  
  queueEach('whatsup', "SELECT DISTINCT uid, u.:IS_CO as co, MAX(t.created) AS lastTx FROM users u LEFT JOIN tx_entries e USING(uid) JOIN tx_hdrs t USING(xid) WHERE uid>:UID_CANON9 AND u.:IS_OK GROUP BY uid HAVING lastTx IS NULL OR lastTx < $start");
  
  $sql = <<< X
    SELECT DISTINCT u.uid, ROUND(SUM(t.amt)*u.crumbs, 2) AS donate, $end AS date
    FROM users u LEFT JOIN txs_noreverse t ON t.uid2=u.uid
    WHERE t.goods=:FOR_GOODS AND t.created BETWEEN $start AND $end AND u.:IS_OK
    AND (SELECT 1 FROM txs_noreverse WHERE :IS_CRUMBS AND created>=$end AND uid1=u.uid LIMIT 1) IS NULL
    AND (SELECT 1 FROM tx_requests WHERE :IS_CRUMBS AND created>=$end AND payer=u.uid LIMIT 1) IS NULL
    GROUP BY uid HAVING donate>0
X;
  queueEach('crumbs', $sql);
  queueEach('sweep', "SELECT $start AS start,$end AS end"); // must come after all crumbs

  // figure amount to share with each official Common Good Community
// Not until cgc means signed the CG/CGC agreement (and then not retroactive) queueEach('cgc', $cttyGiftsSql($end));
  
  $list = db\lst("CONCAT(fullName,' (',city,')')", 'users', ':IS_OK AND :IS_PAPER');
  r\tellAdmin(t('Send paper statements'), compact('list'), 0); // 0 = don't state current account

}

/**
 * Ask the member what's up, if they haven't done anything for a month or more.
 */
function whatsup($item) {
  extract(just('uid lastTx co', $item));
  $msg = 'whats up' . ($co ? '|co promo' : '');
  r\acct($uid)->tellMisc($msg, ray('lastTx', u\fmtDate($lastTx)));
}

/**
 * Yearly
 */
function everyYear() {
  $topic = t('Annual task list');
  r\tellAdmin(t('Generate 1099-K forms for IRS and states'), compact('topic'));
  
  $year = date('Y') - 1;
  $start = strtotime("$year-01-01"); // previous year
  $end = u\plusMonths(12, $start) - 1;
  queueEach('taxInfo', "SELECT DISTINCT uid, $year AS year FROM tx_entries JOIN tx_hdrs USING(xid) WHERE created between $start AND $end AND uid NOT :CANONIC ORDER BY uid");
}

/**
 * Notify each user about their 1099-K form.
 */
function taxInfo($item) {
  extract(just('uid year', $item));
  r\acct($uid)->tellMisc('see tax info', compact('year'));
}

/**
 * Calculate and credit inflation adjustment to each member account.
 */
function inflationAdjust($item) {
  return; // UNUSED (but hey, we might do this someday)
  extract(just('uid start end', $item));
  $a = r\acct($uid);
  if ($a->slave) return; // slave in joint account gets no inflation (master gets inflation for both)
  if (db\exists('r_txs', 'payee=:uid AND type=:TX_INFLATION AND created>=:end', compact('uid', 'end'))) return;
  list ($avg, $min) = r\averageBalance($uid, $start, $end);
//  if ($adjustment > 0)  // don't adjust debts
//  foreach ([t('average balance') => $avg, t('credit reserve') => $ravg] as $k => $v) {
  foreach ([t('average balance') => $avg] as $k => $v) {
    $adjustment = round($v * R_INFLATION_RATE / 12, 2);
//    if ($adjustment) be\fund($uid, TX_INFLATION, $adjustment, INFLATION_DESC . t(' on your ') . $k);
  }
}

/**
 * Donate percentage of funds received to the community.
 * Allow this even if account is inactive (donation has already been made, from member's point of view).
 */
function crumbs($item) {
  extract(just('uid donate date', $item));
  $a = r\acct($uid);
  if ($donate > 0 and $a->ok) {
    $z = $a->payApproved(UID_CRUMBS, $donate, t('crumbs desc', 'pct', u\fmtAmt($a->crumbs, '%')), FOR_NONGOODS, ray('created crumbs gift', $date, TRUE, TRUE));
    if (!$z->ok) r\tellAdmin($z->msg, $z->subs);
  }
}

/**
 * Sweep roundups and crumbs contributions into Common Good's account.
 */
function sweep($item) {
  extract(just('end', $item));
  
  $cgA = r\acct(CGID);
  foreach (ray('roundup crumb', UID_ROUNDUPS, UID_CRUMBS) as $type => $uid) {
    $a = r\acct($uid);
    $amt = $a->balance - db\sum('amt', 'txs', 'uid2=:uid AND created>:end', compact(ray('uid end'))); // all but what's too new
    if ($amt > 0) {
      $z = be\transfer('payment', $a, $cgA, $amt, $type . t(' donations'), FOR_GOODS, ray('created gift', $end, TRUE));
      if (!$z->ok) r\tellAdmin($type . t(' sweep failed: ') . $msg);
    }
  }
}  

/**
 * Kick half the donations originating in an organized CGC back to that community.
 */
function cgc($item) {
  extract(just('ctty in out end bounces', $item));
  $kickBack = round($in / 2 - $out - R_DEPOSIT_RETURN_FEE * $bounces, 2);
  if ($kickBack > 0) {
    list ($a, $cgA) = [r\acct($ctty), r\cgA()];
    $desc = t('50% share of local donations through %dt', 'dt', u\fmtDate($end));
    if ($a->ok) {
      $z = be\transfer('payment', $cgA, $a, $kickBack, $desc, FOR_NONGOODS, ray('created gift', u\monthDay1() - 1, TRUE));
      if (!$z->ok) r\tellAdmin(t('Failed sharing 50% with community ') . "$a->fullName: $z->msg");
    }
  }
}  

/**
 * Check accounts for consistency, scams, whatever.
 */
function checkAccts() {
  $sql = <<< X
SELECT DISTINCT u.uid,u.fullName,u.jid,u2.jid AS partnerJid,r.reid,r.other AS relatedUid FROM users u
LEFT JOIN r_relations r ON r.main=u.uid
LEFT JOIN users u2 ON u2.uid=u.jid
WHERE u.uid<>0 AND u.jid AND r.permission=:B_JOINT-:B_RELATED
X;
  queueEach('checkAcct1', $sql);
  queueNext();
}

function checkAcct1($item) {
  extract($item);
  $a = r\acct($uid);
  if (!$reid or !$partnerJid or $partnerJid != $uid or $relatedUid != $jid) r\tellAdmin('bad relation', $item);

  if ($a->masterA->hasBank xor $a->masterA->risk('hasBank')) {
    $a->setRisk('hasBank', $a->masterA->hasBank);
    r\tellAdmin('hasBank was set wrong', $item);
  }
  //look at agreement date and first transaction date and last transaction date. queue appropriate funcs
}

/**
 * Analyze anew how each member relates to other members.
 */
function setNear() {
  db\q('TRUNCATE r_near'); // start from scratch
  $queries = join(' UNION ', [
    'SELECT DISTINCT inviter AS id1, invitee AS id2, 1 AS w FROM r_invites WHERE invitee',
    'SELECT DISTINCT person AS id1, proxy AS id2, 1 AS w FROM r_proxies',
    'SELECT DISTINCT uid1 AS id1, uid2 AS id2, 1 AS w FROM txs WHERE uid1>:UID_CANON9 AND uid2>:UID_CANON9 AND uid1<uid2',
    'SELECT DISTINCT main AS id1, other AS id2, 1 AS w FROM r_relations',
    'SELECT DISTINCT u1.uid AS id1, u2.uid AS id2, 0.5 AS w FROM users u1 INNER JOIN users u2 ON (u2.city=u1.city OR u2.zip=u1.zip) WHERE u1.uid<>u2.uid',
  ]); // each type of relationship counts as one point
  $sql = <<< X
    INSERT INTO r_near
    SELECT DISTINCT LEAST(q.id1, q.id2) AS uid1, GREATEST(q.id1, q.id2) AS uid2, SUM(w) AS weight 
    FROM ($queries) q 
    LEFT JOIN users u ON u.uid=q.id1
    LEFT JOIN users v ON v.uid=q.id2
    WHERE NOT u.:IS_CO AND NOT v.:IS_CO
    GROUP BY LEAST(q.id1, q.id2), GREATEST(q.id1, q.id2)
X;
  db\q($sql);
  queueNext();
}

/**
 * Update individual account stats
 * DISABLED
 */
function acctStats() {
  /*
  db\q('UPDATE users SET picture=0'); // clear temp field
  queueEach('acctStats1', 'SELECT uid FROM users WHERE uid>:UID_CANON9 AND :IS_OK');
  */
  queueNext();
}

/**
 * Update stats for one account (joint accounts are aggregated in r\Acct::j_stats(), not here)
 * stats will be an assoc: [avgBalPastMo, avgBalEver, minPastMo, etc.]
 * picture (an otherwise unused field) will be minPastMo in cents (ready for r\stats to SUM)
 */
function acctStats1($item, $asof = NULL) {
  extract(just('uid', $item));
  u\setDft($asof, now());
  $a = r\acct($uid);
  $asof = strtotime('today', $asof);
  $monthAgo = u\plusMonths(-1, $asof);
  list ($avgBalPastMo, $minPastMo) = r\averageBalance($uid, $monthAgo, $asof, TRUE);
  list ($avgBalEver) = r\averageBalance($uid, strtotime('today', $a->created), $asof, TRUE);
///  debug(compact('avgBalEver','uid','asof') + ['created' => $a->created]);
  $subs = compact('uid', 'monthAgo', 'asof');
  
  $sql = <<< X
    SELECT SUM(amt) AS giftsEver, SUM(IF(created<:monthAgo, 0, amt)) AS giftsPastMo
    FROM txs WHERE uid1=:uid AND uid2=:CGID AND :IS_GIFT AND created<:asof
X;
  $row1 = db\q($sql, $subs)->fetchAssoc() ?: []; // giftsEver, giftsPastMo
  $row2 = [];  

  $sql = <<< X
    SELECT SUM(-amount) AS bankedEver, SUM(IF(completed<:monthAgo, 0, -amount)) AS bankedPastMo
    FROM txs2_bank WHERE payee=:uid AND completed AND completed<:asof AND amount<>0
X;
  $row3 = db\q($sql, $subs)->fetchAssoc() ?: []; // get bankedEver, bankedPastMo

  $newData = $row1 + $row2 + $row3 + compact(ray('avgBalPastMo avgBalEver minPastMo'));

  foreach ($newData as $k => $v) $newData[$k] = '' . round($v, 2); // avoid long decimals
  $a->update('stats picture', serialize($newData), $minPastMo * 100);
}

/**
 * Update system-wide and community-wide stats
 * @param int $dt1: date to start (-1 means pick up where we left off)
 * @param string $redo: space-delimited list of statistics to recalculate (ALL for all, '' for none) -- used by admin only
 */
function cttyStats($dt1 = 0, $redo = '') {
  if (!$dt1) { // normally this is called without a date
    cttyStats1(['ctty' => 0]); // for all our communities total
    cttyStats1(['ctty' => 1]); // for all communities in the server's region
    queueEach('cttyStats1', 'SELECT DISTINCT uid AS ctty FROM users WHERE uid<0'); // and one at a time
    queueNext();
  } else { // recreate stats data from the beginning of time (called only manually)
/*      SELECT community AS ctty, MIN(t.created) AS start
      FROM users u LEFT JOIN r_txs t ON t.payee=u.uid 
      WHERE uid>:UID_CANON9 AND (t.created>=:R_LAUNCH OR t.created IS NULL) GROUP BY community ORDER BY -community
      */
    $sql = 'SELECT uid AS ctty, created FROM users WHERE uid<0 ORDER BY -community';
    $cttys = db\q($sql)->fetchAllKeyed();
    u\preray([0 => min($cttys), 1 => min($cttys)], $cttys); // show all dates overall

    if ($dt1 < 0) $dt1 = db\max('created', 'r_stats'); // repeat last date to catch missing cttys
    if (!$dt1) $dt1 = nni($cttys, 0, 0) ?: now();
    $dt = strtotime('today', $dt1); // use first moment of the day

    while ($dt <= now()) {
      foreach ($cttys as $ctty => $start) if ($start <= $dt) {
        $item = compact(ray('ctty dt redo'));
        if (isPRODUCTION) cr\queue('cttyStats1', $item); else cttyStats1($item);
      }
      $dt = strtotime('+1 days', $dt); // every day, not just GRAIN
    }
  }
}

define('BAN_MONTHS', 3); // number of months in a row to have + or - demand, to set credit ban on/off

function cttyStats1($item) {
  extract(just('ctty dt redo', $item));
  u\setDft($dt, $today = today());

  $stats = r\stats($ctty, $dt, nn($redo)); // calculate stats for one community on the regional server, for the given date
  
  // see if we need to set or turn off a "credit ban"
  if ($dt == $today and $ctty) {
    $allPos = $allNeg = TRUE;
    for ($i = 0; $i <= BAN_MONTHS; $i++) {
      $usdX = nn($usd, 0); // following month's Dollar Pool total
      $ago = -30 * $i;
      $stats = r\stats($ctty, strtotime($ago . ' days', $dt));
      $usd = $stats['usdIn'] + $stats['usdOut']; // this month's Dollar Pool total++
      if ($i > 0) {if ($usdX - $usd < 0) $allPos = FALSE; else $allNeg = FALSE;}
    }
    $cttyA = r\acct($ctty);
    $subs = ray('months', BAN_MONTHS);
    if ($allNeg and !$cttyA->noneg) r\tellCAdmin('credit ban on', $subs, $ctty);
    if ($allPos and $cttyA->noneg) r\tellCAdmin('credit ban off', $subs, $ctty);
  }
}

/**
 * Calculate how much each member is trusted by the others.
 */
function trust() {
  db\q('UPDATE users SET trust=IF(:IS_CO,0,1)');
  $sql = <<< X
    UPDATE users u 
    INNER JOIN
      (SELECT DISTINCT proxy AS uid,SUM(straw) AS bale
       FROM 
         (SELECT proxy,up.trust/p.priority AS straw
          FROM r_proxies p 
          LEFT JOIN users up ON up.uid=p.person) s
       GROUP BY proxy) b
    ON b.uid=u.uid
    SET u.trust=u.trust+:weight*b.bale WHERE NOT :IS_CO
X;
  for ($i = 0, $weight = 1; $i < 32; $i++, $weight /= 2) db\q($sql, compact('weight'));
  if (test()) db\q('UPDATE users SET trust=ROUND(trust, 2)'); // make the results easily testable
  queueNext();
}

/**
 * Report on individual members or member businesses that have large activity over the past day (definitely > $3k)
 */
function biggies() {
  $admin = t('Consider whether any of these high totals reflect money laundering.'); // appears as "admin: ..."
  $start = strtotime('yesterday');
  $end = today() - 1;
  $sql = <<<X
    SELECT fullName, SUM(ABS(amount)) AS total 
    FROM tx_entries JOIN users USING (uid) JOIN tx_hdrs h USING (xid)
    WHERE h.created BETWEEN $start AND $end AND uid NOT :CANONIC
    GROUP BY uid
    HAVING total>1000
    ORDER BY total DESC
X;

  if ($list = db\q($sql)->fetchAllKeyed()) r\tellAdmin(t('Big Transfers on ') . u\fmtDate(), compact(ray('admin list')));
  queueNext();
}

/**
 * Calculate risks of financial misbehavior for each account.
 * Do companies first, so their risk can be used to help assess individual risk.
 * Do the whole thing twice, to take into account relations with suspicious individuals.
 * @todo: use a temp table instead of newThresholds array OR just a complex SQL
 */
function acctRisk() {
  setv('newThresholds', ray('bigDay bigWeek big7Week bigYear', [], [], [], []));

  db\q('UPDATE users SET risk=NULL'); // avoid unnecessary badConx. don't touch risks though!
  foreach ([1, 2] as $zot) { // do this twice, to take into account connections with scoundrels
    queueEach('acctRisk1', 'SELECT DISTINCT uid FROM users WHERE uid>:UID_CANON9 and :IS_OK ORDER BY :IS_CO DESC');
  }
  queueNext();
}

function acctRisk1($item) {
  include_once R_ROOT . '/cg-risk.inc';
  global $newThresholds;
  
  $newThresholds = getv('newThresholds');
  k\acctRisk1($item['uid'], getv('riskThresholds', ray('bigDay:0,bigWeek:0,big7Week:0,bigYear:0')));
  setv('newThresholds', $newThresholds);
}

/**
 * Finish aggregating threshold data collected from within acctRisk1.
 */
function acctRiskFinish() {
  global $testThresholdPct;
  $newThresholds = getv('newThresholds');
  $pct = K_THRESHOLD_PCT;
  if (test()) $pct = $testThresholdPct;
  $index = ceil(count($newThresholds[key($newThresholds)]) * $pct / 100); // pointer to threshold value
  foreach ($newThresholds as $k => $ray) {
    rsort($ray);
    $riskThresholds[$k] = $ray[$index];
  }
  setv('riskThresholds', $riskThresholds);
  queueNext();
}

/**
 * Calculate risks of financial misbehavior for each recent transaction, including bank transfers.
 * Include payments from the community.
 */
function txRisk() {
  $sql = <<<EOF
    SELECT DISTINCT xid FROM txs
    WHERE risk IS NULL AND uid2 NOT :CANONIC AND amt<>0
    ORDER BY created,xid
EOF;
  queueEach('txRisk1', $sql);
  queueNext();
}

function txRisk1($xid) {
  include_once R_ROOT . '/cg-risk.inc';
  k\txRisk1(is_array($xid) ? $xid['xid'] : $xid);
}

/**
 * 1. Mark deposited transfers complete USDTX_DAYS business days after deposit (if not already marked complete)
 * 2. Get funds from a connected bank account or drawable CG account, as needed, 
 *    handling approved invoices and investment requests as we go
 */
function getFunds() {
  queueEach('getFunds1', 'SELECT uid, request, stakeid FROM users LEFT JOIN r_stakes USING (uid) WHERE (request IS NULL OR request>0) AND :MASTER AND uid>:UID_CANON9 AND :IS_OK');

  $sql = 'SELECT DISTINCT xid,channel FROM txs2_bank WHERE amount>0 AND NOT completed AND :NOW-created>=:HOUR_SECS AND (amount<=:USDTX_FAST OR :NOW-created>=:USDTX_DAYS*:DAY_SECS)'; // this allows us to wait arbitrarily long to deposit chks or do ACHs
  queueEach('completeUsdTx', $sql);
  
  queueNext();
}

function completeUsdTx($item) {
  extract(just('xid channel', $item));
  be\completeUsdTx($xid, $channel != TX_CRON);
}

function getFunds1($item) {
  extract(just('uid request stakeid', $item, NULL));
  $a = r\acct($uid);

  // pay pending requests and add up the amounts still pending, so we include those in the amount of funds to get
  $pending = 0;
  $sql = <<< o
    SELECT i.* FROM tx_requests i JOIN users u1 ON u1.uid=i.payer JOIN users u2 ON u2.uid=i.payee
    WHERE i.status=:TX_APPROVED AND u1.:IS_OK AND u2.:IS_OK AND i.payer=:uid
    ORDER BY i.nvid
o;
  $q = db\q($sql, compact('uid'));
  while($row = $q->fetchAssoc()) $pending += payPending($a, $row['nvid']);
  if ($request) $pending += payInvestmentRequests($a, $request, $stakeid);

  if ($a->balance < 0 and !$a->wentNeg) $a->update('wentNeg', now()); // legacy check, so we don't somehow never examine negative balance accounts (remove 7/1/2021)
  
  list ($target, $why) = $a->refill // target is what we want to end up with after covering pending payments
  ? [$a->minimum + $pending, t('to target')]
  : [min($pending, $a->balance + $pending), t('to pending')]; // this could be negative (just enough to pay pending)
  
  if ($target < $pending and $target < 0) { // tentatively bringing balance up only to some negative amount after paying the pending requests
    if (!$a->debt or ($a->wentNeg and now() - $a->wentNeg > R_DEBT_DAYS * DAY_SECS)) { // time to get out of the negative
      list ($target, $why) = [$pending, t('to zero')]; // scootch up to zero if credit line timed out or member doesn't want negative
    }
  }
  
  $amount = $target - $a->balance; // scootch up to target, if below
    
  if ($amount > 0) $a->getFunds($amount, $why); // getFunds will subtract any amount already waiting
}

/**
 * Try to pay any pending transaction requests.
 * @param assoc $nvid: request record ID
 * @return numeric: remaining amount pending
 */
function payPending($a, $nvid) {
  if (!$a->ok) return 0; // don't try to pay from an inactive account (we can delay collection by temporarily deactivating)
  
  $z = be\payInvoice($nvid);
  return nni($z->subs, 'shortfall', 0);
}

/**
 * Handle requests to invest in an investment club.
 * @return numeric: remaining amount requested
 */
function payInvestmentRequests($a, $request, $stakeid) {
  if (!$a->avail($request)) return $request;

  r\handleInvestmentRequest($stakeid, $msg);
  $a->tellMisc($msg);
  return 0;
}

/**
 * Handle pending requests (invoices and unfunded payments).
 */
function pendingRequests() {
  $sql = <<< X
    SELECT DISTINCT i.*
    FROM tx_requests i JOIN users u1 ON u1.uid=i.payer JOIN users u2 ON u2.uid=i.payee
    WHERE i.status=:TX_PENDING AND u2.:IS_OK
    ORDER BY i.nvid
X;
  queueEach('pendingRequest', $sql);
  queueNext();
}

function pendingRequest($item) {
  extract(just('nvid payer payee amount purpose status created', $item));
  $a1 = r\acct($payer);
  $a2 = r\acct($payee);
  
  $daysAgo = max(1, round((now() - $created) / DAY_SECS));
  $nudge = $a2->staleNudge;
  if ($nudge !== 0 and $daysAgo % ($nudge ?: STALE_NUDGE) == 0) {
    $subs = ray('daysAgo created amount purpose nvid _a1 payerName payeeName email phone', $daysAgo, u\fmtDate($created, TRUE), u\fmtAmt($amount), $purpose, $nvid, $a1->doLink('inv', $nvid), $a1->fullName, $a2->fullName, $a2->email, $a2->phone);
    $a1->tellMisc('stale invoice', $subs + ['reply' => $payee]); // tell other party by email about this invoice
    $a2->tellMisc('stale invoice report', $subs); // tell the payee we're following up on it
  }
}

/**
 * Send daily, weekly, or monthly message digests. (Newbies are always daily)
 */
function notices() {
  global $timeFor; // for testing
  
  $lastStart = getV('last_cron_start', []); // base timeForW and timeForM on cron start day, not current day (?!)
  $timeForW = (int) (strftime('%w', nni($lastStart, 'day', now())) == R_WEEKLY_DAY);
  $timeForM = (int) (strftime('%d', nni($lastStart, 'day', now())) == R_MONTHLY_DAY);
  if (test()) list ($timeForW, $timeForM) = [(int) nni($timeFor, 'weekly'), (int) nni($timeFor, 'monthly')];

  $sql = "SELECT DISTINCT u.uid, notices, $timeForW AS timeForW, $timeForM AS timeForM FROM r_notices n JOIN users u USING (uid) WHERE NOT sent AND NOT (:CLOSED)";
  queueEach('notice1', $sql);
  
  $fields = 'pid,uid,fullName,email,notices,latitude,longitude,zip'; // comma not space
  $sql = <<< X
    SELECT $timeForW AS timeForW, $timeForM AS timeForM, pid, $fields, '$fields' as fields FROM (
      SELECT $fields FROM people WHERE uid IS NULL
      UNION
      SELECT $fields
      FROM users u LEFT JOIN (SELECT pid, uid FROM people) p USING (uid)
      WHERE uid>:UID_CANON9 AND NOT u.:IS_CO AND IF(activated, :IS_OK, NOT :IS_NONUDGE)
    ) x
X;
  queueEach('postNotices1', $sql);
  
  queueNext();
}

function notice1($item) {
  extract(just('uid notices timeForW timeForM', $item));

  $having = "NOT sent AND IF(nType, 0, IF(wType, $timeForW, IF(mType, $timeForM, 1)))";
  if (!$args = r\noticeArgs($uid, $having, $timeForW, $timeForM)) return;
  $a = r\acct($uid);
  $track = u\cryRay(ray('qid type', $a->mainQid, 'notice'));
  $code = w\getEmailCode(compact('uid'));

  if ($a->ok) {
    $link = BASE_URL . '/do/doInvite~' . $a->doCode();
    list ($question, $btnText) 
    = ($a->co or $a->shouter) ? ['', t('Invite Someone!')] : [t('If you support %PROJECT, please say so! '), t('Endorse')];
    $style = TEXT_BUTTON_STYLE . ' padding:3px 7px; margin-left:4px;'; // smaller for emails
    $shout = '<p>' . $question . w\lnk($link, $btnText, ray('stule', $style)) . '</p>';
  } else { $shout = ''; }
  
  $args += compact(ray('shout track code'));
  if (!test()) foreach (ray('messages shout') as $k) $args[$k] = str_replace('stule=', 'style=', $args[$k]); // revert in emails (CSP forbids inline styles online)
  if (!$a->tell('notices', $args)) return;
  db\q('UPDATE r_notices SET sent=:NOW WHERE uid=:uid AND NOT sent', compact('uid'));
}

/**
 * Send a notice about recent posts to the given person.
 * The person's notices field is a string of comma-delimited lines, each one in the form:
 * $type:$freq, where
 *   $type: what type of notice (offer, need, tip)
 *   $freq: how often to notify (t=Text now/i=Email now/d=Daily/w=Weekly/m=Monthly)
 *   $radius: notify if within this mile radius (NYI)
 *   $words: notify if the post includes these words (NYI)
 */
function postNotices1($item) {
  global $base_url;
  require_once R_ROOT . '/forms/posts.inc'; // for getPosts()
  extract(just('fields timeForW timeForM', $item, NULL));
  extract(just($fields, $item, NULL));
  
  $posts = '';
  $radius = NEIGHBOR_MAX; // report everything within this many miles
  $logo = tr("<image src=\"$base_url/rcredits/images/%PROJECT_LOGO\" style=\"width:30px; margin-right:10px;\" />");
  $postLink = w\lnk('/community/posts/op=post', t('Post one!'));

  foreach (ray($notices) as $type => $freq) {
//    list ($type, $freq, $radius, $words) = u\padRay(explode('`', $one), 4);
    if (!in($type, 'offer need tip')) continue;
    if (u\fmtDate(now()) != '15Sep2020') // one-time only, email all past posts
    if ($freq != 'd' and !($freq == 'w' and $timeForW) and !($freq == 'm' and $timeForM)) continue;

    $unit = ray('d:day,w:week,m:month')[$freq];
    $since = strtotime("-1 $unit", now());
    if (u\fmtDate(now()) == '15Sep2020') $since = 1;

    $q = w\getPosts($type, $latitude, $longitude, $zip, $radius, $pid ?: 0, 0, 0, $since, FALSE);
    if (!$q->rowCount()) continue;
    $rows = fmtPostRows($q);
    $Type = w\typeName($type, 2);
    $posts .= <<< X
<div style="display:table-cell; vertical-align:middle;">$logo</div>
<div style="display:table-cell; vertical-align:middle;"><b style="font-size:32px; color:navy;">$Type</b></div>
<div style="display:table-cell; vertical-align:middle; text-align:right; width:100%;">$postLink</div>
<br>
$rows
X;
  }
  if (!$posts) return;

  $posts = "<div style=\"font-family:Helvetica; max-width:512px; margin:0 auto;\">$posts</div>";
  if (test()) $posts = strtr($posts, ['src='=>'surc=', 'style='=>'stule']); // avoid CSP errors

  $noFrame = TRUE;  
  $code = w\getEmailCode(compact($uid ? 'uid' : 'pid'));
  r\rMail('post-notice', [u\decry('P', $email) => $fullName], compact(ray('fullName posts radius code noFrame')));
}

function fmtPostRows($q) {
  require_once R_ROOT . '/forms/posts.inc'; // for getPosts()

  while ($row = $q->fetchAssoc()) {
    extract(just('postid dist zip emergency item details city displayName', $row));

    if ($emergency) $item = '<b style="color:red;">!! </b> ' . $item;
    $btn = w\lnk('/community/posts/op=show&postid=' . $postid, t('View or Reply'), ray('style', TEXT_BUTTON_STYLE));
    if ($dist = w\fmtDist($dist, $zip)) $city .= " - $dist mi";
    if (strlen($details) > POST_DETAIL_MAXLEN) $details = substr($details, 0, POST_DETAIL_MAXLEN - 5) . '...';
    $rows[] = <<< X
<span style="font-size:22px">$item</span><br>
<b style="color:#595959; font-size:18px;">$displayName</b><span style="color:#999999; font-size:16px;">, $city</span><br>
<div style="margin-top:15px; color:#595959;">$details</div><br>
<center>$btn</center><br>
<hr style="color:silver;" />
X;
  }
  return join('', nn($rows, []));
}  

/**
 * Last task queued once the everyDay() function has gotten things started.
 */
function END() {
  global $mya; $mya = NULL; // don't tell Admin the last current member
  if (db\exists('queue')) r\tellAdmin('queue has dingleberries'); else db\q('TRUNCATE queue'); // reset autoincr
  $lastCron = getV('last_cron_end', []);
  $lastCron['end'] = now();
  setV('last_cron_end', $lastCron);
  $elapsed = now() - nni($lastCron, 'day', 0);
  $time = strftime('%I:%M%P');
  $msg = t('At %time, after %elapsed secs, daily cron ended successfully.', compact(ray('time elapsed')));
  $topic = t('cron end');
  r\tellAdmin($msg, compact('topic'));
}
